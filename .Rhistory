ifelse(pihat > wald_ci_lower & pihat < wald_ci_upper, wald_ci, FALSE)
## temp <- temp + 1
wald_ci
}
# temp
wald_ci
}
pihat_r <- seq(0.01,10, by = 0.1)
for (i in pihat_r){
test1<-wald_test(n, pihat_r, alpha, numSamples)/numSamples
test2<-wald_test(n, pio, alpha, numSamples)/numSamples
df<-data.frame(i, test1,test2)
}
plot( test1,type="s", col="limegreen", main="Wald test", xlab="sample", ylab="density")
lines(test2, type="s", col="blue", alpha=0.5)
pio<-0.5
n <- 40
#pihat <-  40/1000
alpha <- 0.05
numSamples <- seq(0,1000 ,by=1)
#   wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
# wald_s<-((pihat-pio)/sqrt(pio*(1-pio)/n))
#      y <- rbinom(1, n, pihat)
# wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
#  wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
wald_test <- function(n, pihat, alpha, numSamples) {
temp <- 0
for (i in numSamples){
#y <- rbinom(1, n, pihat)
wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
wald_ci<- 2*(pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
ifelse(pihat > wald_ci_lower & pihat < wald_ci_upper, wald_ci, FALSE)
## temp <- temp + 1
wald_ci
}
# temp
wald_ci
}
pihat_r <- seq(0.01,100, by = 0.1)
for (i in pihat_r){
test1<-wald_test(n, pihat_r, alpha, numSamples)/numSamples
test2<-wald_test(n, pio, alpha, numSamples)/numSamples
df<-data.frame(i, test1,test2)
}
plot( test1,type="s", col="limegreen", main="Wald test", xlab="sample", ylab="density")
lines(test2, type="s", col="blue", alpha=0.5)
pio<-0.5
n <- 40
#pihat <-  40/1000
alpha <- 0.05
numSamples <- seq(0,1000 ,by=1)
#   wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
# wald_s<-((pihat-pio)/sqrt(pio*(1-pio)/n))
#      y <- rbinom(1, n, pihat)
# wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
#  wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
wald_test <- function(n, pihat, alpha, numSamples) {
temp <- 0
for (i in numSamples){
#y <- rbinom(1, n, pihat)
wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
wald_ci<- 2*(pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
ifelse(pihat > wald_ci_lower & pihat < wald_ci_upper, wald_ci, FALSE)
## temp <- temp + 1
wald_ci
}
# temp
wald_ci
}
pihat_r <- seq(0.01,10, by = 0.1)
for (i in pihat_r){
test1<-wald_test(n, pihat_r, alpha, numSamples)/numSamples
test2<-wald_test(n, pio, alpha, numSamples)/numSamples
df<-data.frame(i, test1,test2)
}
plot( test1,type="s", col="limegreen", main="Wald test", xlab="sample", ylab="density")
lines(test2, type="s", col="blue", alpha=0.5)
pio<-0.5
n <- 40
#pihat <-  40/1000
alpha <- 0.05
numSamples <- seq(0,1000 ,by=1)
#   wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
# wald_s<-((pihat-pio)/sqrt(pio*(1-pio)/n))
#      y <- rbinom(1, n, pihat)
# wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
#  wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
wald_test <- function(n, pihat, alpha, numSamples) {
temp <- 0
for (i in numSamples){
#y <- rbinom(1, n, pihat)
wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
wald_ci<- 2*(pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
ifelse(pihat > wald_ci_lower & pihat < wald_ci_upper, wald_ci, FALSE)
## temp <- temp + 1
wald_ci
}
# temp
wald_ci
}
pihat_r <- seq(0.01,1, by = 0.01)
for (i in pihat_r){
test1<-wald_test(n, pihat_r, alpha, numSamples)/numSamples
test2<-wald_test(n, pio, alpha, numSamples)/numSamples
df<-data.frame(i, test1,test2)
}
plot( test1,type="s", col="limegreen", main="Wald test", xlab="sample", ylab="density")
lines(test2, type="s", col="blue", alpha=0.5)
pio<-0.5
n <- 40
#pihat <-  40/1000
alpha <- 0.05
numSamples <- seq(0,1000 ,by=1)
#   wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
# wald_s<-((pihat-pio)/sqrt(pio*(1-pio)/n))
#      y <- rbinom(1, n, pihat)
# wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
#  wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
wald_test <- function(n, pihat, alpha, numSamples) {
temp <- 0
for (i in numSamples){
#y <- rbinom(1, n, pihat)
wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
wald_ci<- 2*(pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
ifelse(pihat > wald_ci_lower & pihat < wald_ci_upper, wald_ci, FALSE)
## temp <- temp + 1
wald_ci
}
# temp
wald_ci
}
pihat_r <- seq(0.01,1, by = 0.01)
for (i in pihat_r){
test1<-wald_test(n, pihat_r, alpha, numSamples)/numSamples
test2<-wald_test(n, pio, alpha, numSamples)/numSamples
df<-data.frame(i, test1,test2)
}
plot( test1,type="s", col="limegreen", main="Wald test", xlab="sample", ylab="density")
lines(test2, type="s", col="blue", alpha=0.5)
df
pio<-0.5
n <- 40
#pihat <-  40/1000
alpha <- 0.05
numSamples <- seq(0,1000 ,by=1)
#   wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
# wald_s<-((pihat-pio)/sqrt(pio*(1-pio)/n))
#      y <- rbinom(1, n, pihat)
# wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
#  wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
wald_test <- function(n, pihat, alpha, numSamples) {
temp <- 0
for (i in numSamples){
#y <- rbinom(1, n, pihat)
wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
wald_ci<- 2*(pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
ifelse(pihat > wald_ci_lower & pihat < wald_ci_upper, wald_ci, FALSE)
## temp <- temp + 1
wald_ci
}
# temp
wald_ci
}
pihat_r <- seq(0.01,1, by = 0.01)
for (i in pihat_r){
test1<-wald_test(n, pihat_r, alpha, numSamples)/numSamples
test2<-wald_test(n, pio, alpha, numSamples)/numSamples
df<-data.frame(i, pihat_r, test1,test2)
}
pio<-0.5
n <- 40
#pihat <-  40/1000
alpha <- 0.05
numSamples <- seq(0,1000 ,by=1)
#   wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
# wald_s<-((pihat-pio)/sqrt(pio*(1-pio)/n))
#      y <- rbinom(1, n, pihat)
# wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
#  wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
wald_test <- function(n, pihat, alpha, numSamples) {
temp <- 0
for (i in numSamples){
#y <- rbinom(1, n, pihat)
wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
wald_ci<- 2*(pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
ifelse(pihat > wald_ci_lower & pihat < wald_ci_upper, wald_ci, FALSE)
## temp <- temp + 1
wald_ci
}
# temp
wald_ci
}
pihat_r <- seq(0.01,1, by = 0.01)
for (i in pihat_r){
test1<-wald_test(n, pihat_r, alpha, numSamples)/numSamples
test2<-wald_test(n, pio, alpha, numSamples)/numSamples
df<-data.frame(i, pihat_r, test1,test2)
}
pio<-0.5
n <- 40
#pihat <-  40/1000
alpha <- 0.05
numSamples <- seq(0,1000 ,by=1)
#   wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
# wald_s<-((pihat-pio)/sqrt(pio*(1-pio)/n))
#      y <- rbinom(1, n, pihat)
# wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
#  wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
wald_test <- function(n, pihat, alpha, numSamples) {
temp <- 0
for (i in numSamples){
#y <- rbinom(1, n, pihat)
wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
wald_ci<- 2*(pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
ifelse(pihat > wald_ci_lower & pihat < wald_ci_upper, TRUE, FALSE)
temp <- temp + 1
}
temp
}
pihat_r <- seq(0.01,1, by = 0.01)
for (i in pihat_r){
test1<-wald_test(n, pihat_r, alpha, numSamples)/numSamples
test2<-wald_test(n, pio, alpha, numSamples)/numSamples
}
plot( test1,type="s", col="limegreen", main="Wald test", xlab="sample", ylab="density")
lines(test2, type="s", col="blue", alpha=0.5)
#when pi=0.5 it gives a smother graph
#with pi-
pio<-0.5
n <- 40
#pihat <-  40/1000
alpha <- 0.05
numSamples <- seq(0,1000 ,by=1)
#   wald_w<-((pihat-pio)/sqrt(pihat*(1-pihat)/n))
# wald_s<-((pihat-pio)/sqrt(pio*(1-pio)/n))
wald_test <- function(n, pihat, alpha, numSamples) {
temp <- 0
for (i in numSamples){
#y <- rbinom(1, n, pihat)
wald_ci<- 2*(pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_upper<- (pihat + (1.96*sqrt(pihat*(1-pihat)/n )))
wald_ci_lower <- (pihat - (1.96*sqrt(pihat*(1-pihat)/n )))
ifelse(pihat > wald_ci_lower & pihat < wald_ci_upper, wald_ci, FALSE)
## temp <- temp + 1
wald_ci
}
# temp
wald_ci
}
pihat_r <- seq(0.01,1, by = 0.01)
for (i in pihat_r){
test1<-wald_test(n, pihat_r, alpha, numSamples)/numSamples
test2<-wald_test(n, pio, alpha, numSamples)/numSamples
}
plot( test1,type="s", col="limegreen", main="Wald test", xlab="sample", ylab="density")
lines(test2, type="s", col="blue", alpha=0.5)
#when pi=0.5 it gives a smother graph
#with pi= 0-1 its gives  not a smooth graph
knitr::opts_chunk$set(
error = FALSE,
message = FALSE,
warning = FALSE
)
library(knitr)
include_graphics("waffle.jpg")
library(tidyverse)
library(ggplot2)
library(extrafont)
library(waffle)
library(hrbrthemes)
library(dplyr)
waffle(c(20,40,10,5,25), rows = 5, title = "Basic waffle chart", xlab = "1 box equals 1 unit")
data.frame(
Fruits = c("Blue Berry", "Lemon", "Apple", "Grapes"),
vals = c(10, 5,25 , 30),
col = c("blue", "green", "red", "magenta")
) -> fruit_df
fruit_df
fruit_data<- fruit_df %>%
count(Fruits, wt = vals) %>%  #count the no. of fruits and the values of them
ggplot(aes(fill = Fruits, values = n))+ #making the ggplot, fill by fruits, and values set by the count above
coord_equal() + #keeps the waffle plot box ratio as one
theme_ipsum_rc(grid="")  #omits the grid and
#  it enhance the plot, omits axis elements from the plot
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
install.packages(c("waffle", "extrafont", "Hrbrthemes"))
install.packages(c("waffle", "extrafont", "Hrbrthemes"))
knitr::opts_chunk$set(
error = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(ggplot2)
library(extrafont)
library(waffle)
library(hrbrthemes)
library(dplyr)
fruit_data  +
geom_waffle(
n_rows = 10, size = 0.33, colour = "white", flip = TRUE,
make_proportional = TRUE
)
detach("package:hrbrthemes", unload = TRUE)
remove.packages("hrbrthemes", lib="~/R/win-library/3.6")
remove.packages("extrafont", lib="~/R/win-library/3.6")
detach("package:waffle", unload = TRUE)
remove.packages("waffle", lib="~/R/win-library/3.6")
install.packages(c("waffle", "extrafont", "Hrbrthemes"))
packageVersion("hrbrthemes")
install.packages(c("waffle", "extrafont", "Hrbrthemes"))
install.packages(c("waffle", "extrafont", "Hrbrthemes"))
packageVersion("hrbrthemes")
install.packages(c("waffle", "extrafont", "Hrbrthemes"))
knitr::opts_chunk$set(
error = FALSE,
message = FALSE,
warning = FALSE
)
install.packages("hrbrthemes", repos = "https://cinc.rud.is")
packageVersion("hrbrthemes")
library(tidyverse)
library(ggplot2)
library(extrafont)
library(waffle)
library(hrbrthemes)
library(dplyr)
waffle(c(20,40,10,5,25), rows = 5, title = "Basic waffle chart", xlab = "1 box equals 1 unit")
data.frame(
Fruits = c("Blue Berry", "Lemon", "Apple", "Grapes"),
vals = c(10, 5,25 , 30),
col = c("blue", "green", "red", "magenta")
) -> fruit_df
fruit_df
fruit_data<- fruit_df %>%
count(Fruits, wt = vals) %>%  #count the no. of fruits and the values of them
ggplot(aes(fill = Fruits, values = n))+ #making the ggplot, fill by fruits, and values set by the count above
coord_equal() + #keeps the waffle plot box ratio as one
theme_ipsum_rc(grid="")  #omits the grid and
#  it enhance the plot, omits axis elements from the plot
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
library(tidyverse)
library(ggplot2)
library(extrafont)
library(waffle)
library(hrbrthemes)
library(dplyr)
waffle(c(20,40,10,5,25), rows = 5, title = "Basic waffle chart", xlab = "1 box equals 1 unit")
fruit_data +
geom_waffle(
n_rows = 15, size = 0.5, colour = "white", flip = TRUE, radius = unit(9, "pt")
)
remove.packages("hrbrthemes", lib="~/R/win-library/3.6")
remove.packages("waffle", lib="~/R/win-library/3.6")
remove.packages("extrafont", lib="~/R/win-library/3.6")
remove.packages("extrafontdb", lib="~/R/win-library/3.6")
library(devtools)
install.packages(c("waffle", "extrafont", "ggplot2","hrbrthemes"))
install.packages(c("waffle", "extrafont", "ggplot2", "hrbrthemes"))
install.packages(c("waffle", "extrafont", "ggplot2", "hrbrthemes"))
install.packages(c("waffle", "extrafont", "ggplot2", "hrbrthemes"))
knitr::opts_chunk$set(
error = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(ggplot2)
library(extrafont)
library(waffle)
library(hrbrthemes)
library(dplyr)
waffle(c(20,40,10,5,25), rows = 5, title = "Basic waffle chart", xlab = "1 box equals 1 unit")
data.frame(
Fruits = c("Blue Berry", "Lemon", "Apple", "Grapes"),
vals = c(10, 5,25 , 30),
col = c("blue", "green", "red", "magenta")
) -> fruit_df
fruit_df
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data<- fruit_df %>%
count(Fruits, wt = vals) %>%  #count the no. of fruits and the values of them
ggplot(aes(fill = Fruits, values = n))+ #making the ggplot, fill by fruits, and values set by the count above
coord_equal() + #keeps the waffle plot box ratio as one
theme_ipsum_rc(grid="")  #omits the grid and
#  it enhance the plot, omits axis elements from the plot
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
library(tidyverse)
library(ggplot2)
library(extrafont)
library(waffle)
library(hrbrthemes)
library(dplyr)
fruit_data +
geom_waffle(
n_rows = 15, size = 0.33, colour = "white", flip = TRUE
)
<img src="Aaphsaarah Rahman resume'20.pdf" ,alt="some text" , width="4200" height="4200">
include_graphics(img src="Aaphsaarah Rahman resume'20.pdf" ,alt="some text" , width="4200", height="4200")
include_graphics("Aaphsaarah Rahman resume'20.pdf" ,alt="some text" , width="4200", height="4200")
library(knitr)
include_graphics("me.jpg")
include_graphics("Aaphsaarah Rahman resume'20.pdf" ,alt="some text" , width="4200", height="4200")
include_graphics("Aaphsaarah Rahman resume'20.pdf" )
include_graphics("Aaphsaarah Rahman resume'20.pdf" )
knitr::include_graphics("Aaphsaarah Rahman resume'20.pdf")
knitr::include_graphics("Aaphsaarah Rahman resume'20.pdf")
knitr::include_graphics("Aaphsaarah Rahman resume'20.pdf")
knitr::include_graphics("Aaphsaarah Rahman resume'20.pdf")
library(knitr)
include_graphics("Aaphsaarah Rahman resume'20.pdf")
include_url(https://ieeexplore.ieee.org/abstract/document/8342559/metrics#metrics)
library(knitr)
include_graphics("me.jpg")
include_url(https://ieeexplore.ieee.org/abstract/document/8342559)
include_url("https://ieeexplore.ieee.org/abstract/document/8342559")
include_url("https://ieeexplore.ieee.org/abstract/document/8342559", height = 20)
include_url(https://ieeexplore.ieee.org/abstract/document/8342559, height = 20)
include_url(https://ieeexplore.ieee.org/abstract/document/8342559, height = '400px')
include_url(https://ieeexplore.ieee.org/abstract/document/8342559, height = '400px')
include_url('https://ieeexplore.ieee.org/abstract/document/8342559', height = '400px')
include_app("Aaphsaarah Rahman resume'20.pdf", height = '700px')
include_app("Aaphsaarah Rahman resume'20.pdf", height = '700px')
#include_app("Aaphsaarah Rahman resume'20.pdf", height = '700px')
include_graphics(
auto_pdf = getOption("knitr.graphics.Aaphsaarah Rahman resume'20.pdf", FALSE),
dpi = NULL,
error = TRUE
)
#include_app("Aaphsaarah Rahman resume'20.pdf", height = '700px')
include_graphics( path = "Aaphsaarah Rahman resume'20.pdf",
auto_pdf = getOption("knitr.graphics.Aaphsaarah Rahman resume'20.pdf", FALSE),
dpi = NULL,
error = TRUE
)
include_graphics("Aaphsaarah Rahman resume'20.pdf")
include_graphics("Aaphsaarah Rahman resume'20.pdf", )
include_graphics("Aaphsaarah Rahman resume'20.pdf", )
include_graphics("Aaphsaarah Rahman resume'20.pdf")
include_graphics("Aaphsaarah Rahman resume'20.pdf")
include_graphics("Aaphsaarah Rahman resume'20.pdf", height="700px")
include_url('https://ieeexplore.ieee.org/abstract/document/8342559', height = '500px')
